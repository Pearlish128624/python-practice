import os
import csv
from datetime import datetime

def update_leaderboard(player_name: str, score: int) -> None:
    """Update the leaderboard with new score"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    leaderboard_path = os.path.join(current_dir, 'source', 'leaderboard.csv')
    
    # Read existing leaderboard
    leaderboard = {}
    if os.path.exists(leaderboard_path):
        with open(leaderboard_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                name = row['player_name']
                if name not in leaderboard or int(row['score']) < score:
                    leaderboard[name] = {
                        'score': int(row['score']),
                        'datetime': row['datetime']
                    }
    
    # Update current player's score if it's higher
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if player_name not in leaderboard or leaderboard[player_name]['score'] < score:
        leaderboard[player_name] = {
            'score': score,
            'datetime': current_time
        }
    
    # Write updated leaderboard
    with open(leaderboard_path, 'w', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['player_name', 'score', 'datetime'])
        for name, data in sorted(leaderboard.items(), key=lambda x: (-x[1]['score'], x[0])):
            writer.writerow([name, data['score'], data['datetime']])

def display_leaderboard() -> None:
    """Display the current leaderboard"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    leaderboard_path = os.path.join(current_dir, 'source', 'leaderboard.csv')
    
    if not os.path.exists(leaderboard_path):
        print("\nNo leaderboard data available yet!")
        return
        
    print("\n" + "="*50)
    print("\nLEADERBOARD")
    print("="*50)
    print(f"{'Rank':<6}{'Player':<15}{'Score':<8}{'Date/Time':<20}")
    print("-"*50)
    
    with open(leaderboard_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for i, row in enumerate(reader, 1):
            print(f"{i:<6}{row['player_name']:<15}{row['score']:<8}{row['datetime']:<20}")
    print("="*50 + "\n")

def StartGuessing(word: str, meaning: str, player_name: str) -> None:
    """Main game logic"""
    if word is None or meaning is None:
        print("Error: Could not load vocabulary.")
        return
        
    lives = 10
    score = 0
    
    while True:
        word_length = len(word)
        guessed_letters = set()
        display_word = "_ " * word_length
        
        # Show initial word state
        print(f"The word you are guessing is: {display_word}")
        print(f"This word contains {word_length} letters.")
        
        while lives > 0:
            guess = input("\nEnter a letter: ").lower()
            # ... existing game logic ...
            
            if "_" not in display_word:
                print(f"Correct guess!")
                print(f"Current word: {word}")
                print(f"You finished the word: {word}")
                print(f"The meaning of the word is: {meaning}")
                score += 1
                
                word, meaning = ReadQuestion()
                if word is None or meaning is None:
                    print("Error: Could not load next word.")
                    return
                
                print("\n" + "="*50 + "\n")
                print("New Round Starting!")
                break
        
        if lives <= 0:
            print(f"You died! The correct word was: {word}")
            print(f"The meaning of the word is: {meaning}")
            print(f"Game Over! Your final score is: {score}")
            
            # Update leaderboard
            update_leaderboard(player_name, score)
            
            # Ask if player wants to see leaderboard
            print("\n")  # Add a blank line for better readability
            show_leaderboard = input("Would you like to check the leaderboard? (y/n): ").lower()
            if show_leaderboard == 'y':
                display_leaderboard()
            return  # End the game
if __name__ == "__main__":
    print("Welcome to the Hangman Game!")
    player_name = player_name()
    word, meaning = ReadQuestion()  # Get the first word and its meaning
    StartGuessing(word, meaning, player_name)
    